{"version":3,"file":"static/js/750.cc10efcf.chunk.js","mappings":"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","sources":["components/UserAccountForms/RegistrationForm.jsx","webpack://react-homework-template/./src/Styles/PageStyles.module.css?d1db","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { createUser } from '../../api/requests';\n\nimport styles from '../../Styles/PageStyles.module.css';\n\nconst formValidate = values => {\n  if (values.firstname.length < 3) {\n    return false;\n  }\n  if (values.lastname.length < 4) {\n    return false;\n  }\n  if (!values.email.includes('@')) {\n    return false;\n  }\n  if (values.password.length < 7) {\n    return false;\n  }\n  return true;\n};\n\nconst RegistrationForm = () => {\n  const dispatch = useDispatch();\n\n  const userRequestStatus = useSelector(state => state.users.user.status);\n\n  const inputRef = useRef(); // { current: }\n  const firstNameId = useRef(nanoid());\n  const lastNameId = useRef(nanoid());\n  const emailId = useRef(nanoid());\n  const passwordId = useRef(nanoid());\n\n  const [formValues, setFormValues] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    password: '',\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const { email, password, firstname, lastname } = formValues;\n\n    dispatch(\n      createUser({\n        name: `${firstname} ${lastname}`,\n        email,\n        password,\n      })\n    );\n  };\n\n  const handleInputValueChange = event => {\n    setFormValues(prevState => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  const isSubmitButtonEnabled = formValidate(formValues);\n\n  return (\n    <div className={styles.container}>\n      <h1>Welcome to the phone book application.</h1>\n      <h2>Register to create your contact list:</h2>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={firstNameId.current}>First name:</label>\n        <input\n          ref={inputRef}\n          id={firstNameId.current}\n          name=\"firstname\"\n          placeholder=\"Enter your first name\"\n          value={formValues.firstname}\n          onChange={handleInputValueChange}\n          className={styles.input__field}\n        />\n\n        <label htmlFor={lastNameId.current}>Last name:</label>\n        <input\n          id={lastNameId.current}\n          name=\"lastname\"\n          placeholder=\"Enter your last name\"\n          value={formValues.lastname}\n          onChange={handleInputValueChange}\n          className={styles.input__field}\n        />\n\n        <label htmlFor={emailId.current}>Email address:</label>\n        <input\n          id={emailId.current}\n          name=\"email\"\n          placeholder=\"Enter your email address\"\n          value={formValues.email}\n          type=\"email\"\n          onChange={handleInputValueChange}\n          className={styles.input__field}\n        />\n\n        <label htmlFor={passwordId.current}>Password:</label>\n        <input\n          id={passwordId.current}\n          name=\"password\"\n          placeholder=\"Enter your password\"\n          type=\"password\"\n          value={formValues.password}\n          onChange={handleInputValueChange}\n          className={styles.input__field}\n        />\n\n        <button\n          className={styles.input__button}\n          type=\"submit\"\n          appearance=\"primary\"\n          disabled={!isSubmitButtonEnabled || userRequestStatus === 'fetching'}\n        >\n          Submit\n        </button>\n\n        <Link to=\"/login\" className={styles.link__text}>\n          Already have an account? Log in\n        </Link>\n      </form>\n    </div>\n  );\n};\n\nexport default RegistrationForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageStyles_container__j4f+1\",\"input__field\":\"PageStyles_input__field__9n3ER\",\"input__button\":\"PageStyles_input__button__ecN1D\",\"link__text\":\"PageStyles_link__text__5Zgk8\",\"link__menu\":\"PageStyles_link__menu__Ro0Je\",\"contact__list\":\"PageStyles_contact__list__QkM31\",\"contact__listItem\":\"PageStyles_contact__listItem__zmhcw\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["dispatch","useDispatch","userRequestStatus","useSelector","state","users","user","status","inputRef","useRef","firstNameId","nanoid","lastNameId","emailId","passwordId","useState","firstname","lastname","email","password","formValues","setFormValues","handleInputValueChange","event","prevState","target","name","value","useEffect","current","focus","values","isSubmitButtonEnabled","length","includes","className","styles","onSubmit","preventDefault","createUser","htmlFor","ref","id","placeholder","onChange","type","appearance","disabled","to","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}