{"version":3,"file":"static/js/869.c7a52209.chunk.js","mappings":"6PAmGA,UA1FkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAoBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,UAC1DD,GAAOH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,uBAAIA,EAAMC,MAAMC,YAAhB,aAAI,EAAkBE,SAC9CC,GAAaC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OACpBC,GAAaF,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OACpBE,GAAWC,EAAAA,EAAAA,MAEjB,GAAoCC,EAAAA,EAAAA,UAAS,CAC3CC,SAAU,GACVR,MAAO,KAFT,eAAOS,EAAP,KAAmBC,EAAnB,MAKAC,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAIf,GACRA,GACFO,EAAS,gBAGV,CAACP,IAEJ,IAaMgB,EAAyB,SAAAC,GAC7BL,GAAc,SAAAM,GAAS,yBAClBA,GADkB,cAEpBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,YAItC,OACE,iBAAKC,UAAWC,EAAAA,EAAAA,UAAhB,WACE,oEACA,uEAEA,kBAAMC,SAzBW,SAAAP,GACnBA,EAAMQ,iBAEN,IAAQvB,EAAoBS,EAApBT,MAAOQ,EAAaC,EAAbD,SAEfhB,GACEgC,EAAAA,EAAAA,IAAU,CACRxB,MAAAA,EACAQ,SAAAA,MAiBF,WACE,kBAAOiB,QAASxB,EAAWyB,QAA3B,qBACA,kBACEC,WAAS,EACTC,GAAI3B,EAAWyB,QACfR,KAAK,QACLW,YAAY,mBACZV,MAAOV,EAAWT,MAClB8B,SAAUhB,EACVM,UAAWC,EAAAA,EAAAA,gBAGb,kBAAOI,QAASrB,EAAWsB,QAA3B,wBACA,kBACEE,GAAIxB,EAAWsB,QACfR,KAAK,WACLW,YAAY,sBACZE,KAAK,WACLZ,MAAOV,EAAWD,SAClBsB,SAAUhB,EACVM,UAAWC,EAAAA,EAAAA,gBAGb,mBACED,UAAWC,EAAAA,EAAAA,cACXW,WAAW,UACXD,KAAK,SACLE,SACwB,aAAtBvC,IACCe,EAAWD,WACXC,EAAWT,MAPhB,qBAaA,SAAC,KAAD,CAAMkC,GAAG,gBAAgBd,UAAWC,EAAAA,EAAAA,WAApC,2D,mBC1FR,KAAgB,UAAY,8BAA8B,aAAe,iCAAiC,cAAgB,kCAAkC,WAAa,+BAA+B,WAAa,+BAA+B,cAAgB,kCAAkC,kBAAoB,wC,sDCA1T,IAkBIlB,EAAS,WAGX,IAH0B,IAAdgC,EAAc,uDAAP,GACfP,EAAK,GACLQ,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfP,GADEY,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOZ","sources":["components/UserAccountForms/LogInForm.jsx","webpack://react-homework-template/./src/Styles/PageStyles.module.css?d1db","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { loginUser } from '../../api/requests';\n\nimport styles from '../../Styles/PageStyles.module.css';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const userRequestStatus = useSelector(state => state.users.user.status);\n  const user = useSelector(state => state.users.user?.email);\n  const usernameId = useRef(nanoid());\n  const passwordId = useRef(nanoid());\n  const navigate = useNavigate();\n\n  const [formValues, setFormValues] = useState({\n    password: '',\n    email: '',\n  });\n\n  useEffect(() => {\n    console.log(user);\n    if (user) {\n      navigate('/phonebook');\n    }\n    // eslint-disable-next-line\n  }, [user]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const { email, password } = formValues;\n\n    dispatch(\n      loginUser({\n        email,\n        password,\n      })\n    );\n  };\n\n  const handleInputValueChange = event => {\n    setFormValues(prevState => ({\n      ...prevState,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return (\n    <div className={styles.container}>\n      <h1>Welcome to the phone book application.</h1>\n      <h2>Log in to see your contacts and add more:</h2>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={usernameId.current}>Email:</label>\n        <input\n          autoFocus\n          id={usernameId.current}\n          name=\"email\"\n          placeholder=\"Enter your email\"\n          value={formValues.email}\n          onChange={handleInputValueChange}\n          className={styles.input__field}\n        />\n\n        <label htmlFor={passwordId.current}>Password:</label>\n        <input\n          id={passwordId.current}\n          name=\"password\"\n          placeholder=\"Enter your password\"\n          type=\"password\"\n          value={formValues.password}\n          onChange={handleInputValueChange}\n          className={styles.input__field}\n        />\n\n        <button\n          className={styles.input__button}\n          appearance=\"primary\"\n          type=\"submit\"\n          disabled={\n            userRequestStatus === 'fetching' ||\n            !formValues.password ||\n            !formValues.email\n          }\n        >\n          Submit\n        </button>\n\n        <Link to=\"/registration\" className={styles.link__text}>\n          Didn't have account? Register instead\n        </Link>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PageStyles_container__j4f+1\",\"input__field\":\"PageStyles_input__field__9n3ER\",\"input__button\":\"PageStyles_input__button__ecN1D\",\"link__text\":\"PageStyles_link__text__5Zgk8\",\"link__menu\":\"PageStyles_link__menu__Ro0Je\",\"contact__list\":\"PageStyles_contact__list__QkM31\",\"contact__listItem\":\"PageStyles_contact__listItem__zmhcw\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["dispatch","useDispatch","userRequestStatus","useSelector","state","users","user","status","email","usernameId","useRef","nanoid","passwordId","navigate","useNavigate","useState","password","formValues","setFormValues","useEffect","console","log","handleInputValueChange","event","prevState","target","name","value","className","styles","onSubmit","preventDefault","loginUser","htmlFor","current","autoFocus","id","placeholder","onChange","type","appearance","disabled","to","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}